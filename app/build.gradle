apply plugin: 'com.android.application'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  def BUILD_VERSION_FILE_NAME = '../build.properties'
  def BUILD_VERSION_PARAMETER = 'BUILD_VERSION'
  //Increment versionBuild on every build
  def versionPropsFile = file(BUILD_VERSION_FILE_NAME)
  if (versionPropsFile.canRead()) {
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    def versionBuild = versionProps[BUILD_VERSION_PARAMETER].toInteger() + 1
    versionProps[BUILD_VERSION_PARAMETER] = versionBuild.toString()
    versionProps.store(versionPropsFile.newWriter(), null)

    defaultConfig {
      applicationId rootProject.ext.applicationId
      minSdkVersion rootProject.ext.minSdkVersion
      targetSdkVersion rootProject.ext.targetSdkVersion
      versionCode = rootProject.ext.versionCode + versionBuild
      versionName = rootProject.ext.versionName

      jackOptions {
        enabled true
      }
      compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
      }

      testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
  } else {
    throw new GradleException("Could not read " + BUILD_VERSION_FILE_NAME + " file!")
  }

  signingConfigs {
    releaseSign {
      //TODO: add apk configurations
    }
  }

  buildTypes {
    debug {
      debuggable true
      //Allow ProGuard on debug also
      minifyEnabled true
      signingConfig signingConfigs.debug
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      //Include all files in proguardRules folder
      proguardFiles fileTree(dir: "../proguardRules", include: ["*.pro"]).asList().toArray()

      testProguardFile 'proguard-rules.pro'
    }

    release {
      minifyEnabled true
      signingConfig signingConfigs.releaseSign
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      //Include all files in proguardRules folder
      proguardFiles fileTree(dir: "../proguardRules", include: ["*.pro"]).asList().toArray()

      testProguardFile 'proguard-rules.pro'
    }
  }

  productFlavors {
    dev {
//      buildConfigField("String", "ENDPOINT_URL", getSecret("ENDPOINT_URL"))
  //    buildConfigField("String", "API_KEY", getSecret("API_KEY"))
    }
    prod {
      //TODO: add production parameters
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/rxjava.properties'
  }

  //Append versionName to apk
  applicationVariants.all {
    variant ->
      variant.outputs.each {
        output ->
          def file = output.outputFile
          output.outputFile = new File(
              file.parent,
              file.name.replace(".apk", "-${variant.versionName}.apk")
          )
      }
  }
}

def getSecret(String key) {
 // Properties prop = new Properties()
//  prop.load(new FileInputStream(file('../secrets.properties')))
  //return "\"" + prop.getProperty(key) + "\""
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  compile "com.android.support:appcompat-v7:$supportLibVersion"
  compile "com.android.support:design:$supportLibVersion"
  compile "com.android.support:cardview-v7:$supportLibVersion"
  compile "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
  compile "com.jakewharton:butterknife:$butterKnifeVersion"
  annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
  compile "com.github.bumptech.glide:glide:$glideVersion"
  compile "com.squareup.okhttp3:okhttp:$okhttpVersion"
  compile "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
  compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
  compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
  compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$rxJavaAdapterVersion"
  compile "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
  compile "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
  annotationProcessor "com.squareup:javapoet:$javaPoetVersion"
  annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
  compile "com.google.dagger:dagger:$daggerVersion"
  provided group: 'javax.annotation', name: 'jsr250-api', version: "$javaxAnnonationVersion"
  compile "org.parceler:parceler-api:$parcelerVersion"
  annotationProcessor "org.parceler:parceler:$parcelerVersion"
  compile "com.github.sharish:ShimmerRecyclerView:$shimmerRecyclerViewVersion"

  //MemoryLeak
  debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
  releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
  testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

  //Unit/Local testing dependencies
  testCompile "junit:junit:$junitVersion"
  testCompile "org.hamcrest:hamcrest-library:$hamcrestMatcherVersion"
  testCompile "org.mockito:mockito-core:$mockitoVersion"
  testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
  testCompile "org.robolectric:robolectric:$roboElectricVersion"
  testCompile "org.robolectric:shadows-support-v4:$roboElectricVersion"

  //Instrumentation testing dependencies
  compile "com.android.support.test.espresso:espresso-idling-resource:$espressoVersion"
  androidTestCompile "com.android.support:support-annotations:$supportLibVersion"
  androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion", {
    exclude group: 'com.android.support'
    exclude group: 'com.google.code.findbugs'
  })
  androidTestCompile "com.google.code.findbugs:jsr305:$findbugVersion"
  androidTestCompile "com.android.support.test:rules:$espressoRulesVersion"
  androidTestCompile "com.android.support.test.espresso:espresso-intents:$espressoVersion"
//  testAndroidApt "com.google.dagger:dagger-compiler:$daggerVersion"
}